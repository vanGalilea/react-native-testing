skip_docs
metro_port = 8081
build_dir = 'dist'
bundle_id = 'com.reactnativetesting'

before_all do
  if is_ci
    setup_ci
    ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = '180'
  end
end

desc 'Installs all Certs and Profiles necessary for appstore'
lane :match_appstore do
  match(
    type: 'appstore',
    app_identifier: [bundle_id],
    readonly: is_ci
  )
end

lane :stop_metro do
  sh("lsof -t -i:#{metro_port} | xargs kill -s INT || true")
end

lane :load_package do
  load_json(json_path: 'package.json')
end

lane :build_android do
  gradle(project_dir: 'android', tasks: %w[clean assembleRelease])

  Dir.chdir('..') do
    sh("mkdir -p #{build_dir} && mv -f #{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]} #{build_dir}/app.apk")
  end
end

lane :test_android do |options|
  build_android unless is_ci || options[:skip_install]
  wait_android_emu_idle(load_threshold: 1, timeout: 2200)
  emulator_status = -> { sh('adb devices').include?('emulator') }

  Dir.chdir('..') do
    unless options[:skip_install]
      sh("adb uninstall #{bundle_id} >/dev/null || true")
      sh("adb install #{build_dir}/app.apk")
    end

    sh('adb logcat -c || true') if emulator_status.call

    # Record emulator screen using codec h264
    # adb limits the recording to 3 minutes, so we bypass this by redirecting the stream to ffmpeg tool
    video_group_pid = Process.spawn('adb shell "while true; do screenrecord --output-format=h264 -; done" | ' \
                                    'ffmpeg -y -i - fastlane/video.mp4 > fastlane/recording.log 2>&1 &', pgroup: true)
    video_pid = `pgrep -g #{Process.getpgid(video_group_pid)}`.split.map(&:to_i).first

    sh('yarn test:e2e')
  ensure
    sh("kill -s INT #{video_pid} || true")
    sh('adb logcat -d > fastlane/device.log || true') if emulator_status.call
    sh('maestro hierarchy > fastlane/hierarchy.json || true')
    [
      'recording.log',
      'hierarchy.json',
      'device.log',
      'video.mp4'
    ].each { |f| sh("mv -f fastlane/#{f} ~/.maestro/tests || true") } if is_ci
    stop_metro
  end
end
